%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 388.000000 243.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 388 243
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 388 243
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /P put
dup 34 /e put
dup 35 /r put
dup 36 /s put
dup 37 /o put
dup 38 /n put
dup 39 /N put
dup 40 /a put
dup 41 /m put
dup 42 /hyphen put
dup 43 /E put
dup 44 /i put
dup 45 /l put
dup 46 /A put
dup 47 /d put
dup 48 /T put
dup 49 /p put
dup 50 /h put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





02190024022C004000DE004500DE004503550040022C0040023E002402510043014D003D01F4001F04BE003700000048005A008A00BC00FC0164018A02940332039A03EC0416043004CA051205B2064A0678071C075200000001000000140096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 20 dict dup begin
/.notdef 0 def
/hyphen 1 def
/A 2 def
/E 3 def
/N 4 def
/P 5 def
/T 6 def
/a 7 def
/d 8 def
/e 9 def
/h 10 def
/i 11 def
/l 12 def
/m 13 def
/n 14 def
/o 15 def
/p 16 def
/r 17 def
/s 18 def
/uni2B91 19 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec

9FA27491B08AA98C1855C30E9BB19B5F8CE3878781B762D885C3E9A84EB3E6ADB14A8ECA4204D0EAFC17DDB1981F53817820D9269C7D54EB728543B5EA7A377B08092BADF38C65F2EBAE69BFDD60FA20A5F0F2FFDD3A196214177BC0C258DF77B836D8C151850E245B7CDCC4E6F8BBE281556E05A68D0FC7A9FD867AA072B9A82FF43A3FCD5D17F125515046F1C93656B3970ADF5214602706B2A6410ADE8AA8DFE2F3BB1CB9BF225411649FC972A664C9D0877E4DFEA71EACFA43B9848AF599D382544210BB3762FF6A424906C7BDB9674A4B6A0604E8BD9948586A00667255DB2A0294A6F6F7FF6F59788973F98877A8C36E7E744225767B774BA95C647DA214315AE89CDF9F6D4F3969B67B3C5EA182656869A1DFC63A1E80580796FD64AE742D2569394BD6C5E4676D118C53D078B95BDBBC922BA5C777266BC4480A1DE25389CAA0E26658D287284F2C8EEFDBA6E8BA1FEAEDE15CB45FC09B6BC370715C0E3E678DEF7880839CAF5375022FDD09E3EEAD27429F1E1D2DF5D6F573A3420F4B490FE4486EE31A0020F6626B7629FF3AE2A9ED433F3C17C29B4E756D6352766595FA9CBCCD3970D6F73AE1AFE3B9018247AE92DDC15504B6E57B0E02F90EF22B2826D09E7F7EB70665D296F74E12B00A40A2EB2FCA1BDB8EDF3FBE701D948AAEEAFA22657BFFC7991815102F9A756DD4DF08EB24F29AA55661491A9E2ADE672694D9E70BB44119D5EB575F3B3EF8EE650E361310F5CFA64592C0FE2B4A3CFFE50611E0E512F045D1F17C1AE8BA345796517CDC61ACB1C89DE47628593672E138770FCE8B431F7A04980AD3A9D9CD62314CFEE9D8AFE4AA57811AC01712E172506F8EF2E1BE046B32445B0CC133E41EC2DF964E8BF80222CC882F9D51116E190F8C87AAF8FABC9BE51D8CF270C0D8E6F76A5CF1E44BFCB133E9FB71EFC69975AA3ABCE54E9A70F60FFC8861734488EF38688D168BB363959A2ECADAC30CCF4EAC9B89ABB3CDDB4565148C03B552AEE87F2C0ECB9CAD450ABEFBF4B104E92A99CE711BAD54B6754BA8D7D94DF9AEE1C0AD6D6395128FDACA117D20D0BBC99C9455925C0E5FCB5F805C18B885EC493CDE1A11022A22ED165B93236CB74BA7B54DF6C2D6C7D2879109F0F8CFB75DB447179AC1AB73B2F0EF6B824545BF8D79D6670CAF5EA359D1019A2B8B9E3A4E88435222ADFD602D7B681E8BFEB49BCD214078B10605B861C75DBE17438FBE7C69E82DD7156246E81F37C6FC2371596730EED976A4DB9FEADFE2E378A59E0F71BA5B256F7F55B1381A133A4A02DAF97CB272DA511A7DE5276781DC6329320FB26006B5A83F84E6C5E211BDC5DE99DDE1A0710CBEAD3C3C2774360F97EBD5CA997ACADE0957ED92507CF32D65EC78BC4843FC0AD984278D4E358D9BE282430A7D842D5265D21E2CECC53295FA1AB6AC5000773A

77D81993134AA931D0CF0C2FE1740B58F046393350CCD2761AD450001F17122C0F78C673EC1002AF691C5CCA6B654357FC8BC39DEFBB7A591E6C29A016F39A9C34DBDC1CFCB62F859E34511CC9DBB86EA11D89A8A887D4D27FDB2CEABAC6370AA3D11512EA78A6B75D40AD131EEEF7C2E4430DC55028A52D16C574605DE5B956480E47B734E171A40CDD0C3D35B6551E5AEB44F948300926A9D7D235CB64AD7C8E9A9E23E0AE88CE065E5FB4BD2387E459A8C1C9A3D98A3FF1BD1F2716B54CC510E3619DABC6F1E3E3E843B5CC0734E4BCF7EB011EA9022E044D246E01A5C0A3420B0D78B0F3B09BADF0ED2214652DA99E08FAEC6CAF9567E402EBDA711D31058416CD993817192C355061EEAAE89F9C0554DE15AF411201357735A612C217616C6B6087D40EA55F0A8AA6CFB51972DF73D1CF3409B0C0625BB27C4E7CAC6862ED48E581A66407D10F270DEC2B2E060464EAFAC746EDBAEF9C98A47ADA3C29E4C43038F996880287C3B47E9A31A274484CDAA17F2640F4BD93372DEA48FC528E4C30A3289E3220815569A44A204870AAAC6FC9C28C8CC4FB8CF71CF2630D479CEEDF8C39443E47FFC9C46203678EFD519DA329E9C050618F0E1F6CDB96D405530A1130BAFBF45B1B7F5D2B896AB00D506DDE3E0E213016
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 388 243 rc
224.40556 131.25911 m
241.19818 114.27132 241.19818 86.728683 224.40556 69.740891 c
207.61302 52.75301 180.38698 52.75301 163.59444 69.740891 c
146.80182 86.728683 146.80182 114.27132 163.59444 131.25911 c
180.38698 148.24699 207.61302 148.24699 224.40556 131.25911 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -212 494 cm
436.40555 362.74088 m
453.19818 379.72867 453.19818 407.27133 436.40555 424.25912 c
419.61304 441.24698 392.38696 441.24698 375.59445 424.25912 c
358.80182 407.27133 358.80182 379.72867 375.59445 362.74088 c
392.38696 345.75302 419.61304 345.75302 436.40555 362.74088 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 194 100.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-25.184 5.776001 m
(!"#$%&)[ 10.368000 8.592000 5.328000 8.000000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
141.25 241 m
246.75 241 l
246.75 167 l
141.25 167 l
h
141.25 241 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -212 494 cm
353.25 253 m
458.75 253 l
458.75 327 l
353.25 327 l
h
353.25 253 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 194 204 cm
-46.976002 -3.447998 m
('\(\)"*+\)\(,-*)[ 11.552000 8.592000 13.648000 8.592000 6.224000 9.776000 13.648000 8.592000 3.552000 3.552000 0.000000 ] xS
-29.488001 15 m
(.//#"$$)[ 10.368000 9.488000 9.488000 5.040000 8.592000 8.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
280 76 m
385.5 76 l
385.5 2 l
280 2 l
h
280 76 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -212 494 cm
492 418 m
597.5 418 l
597.5 492 l
492 492 l
h
492 418 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 332.75 39 cm
-24.304001 -12.671997 m
('\(\)"*)[ 11.552000 8.592000 13.648000 8.592000 0.000000 ] xS
-39.712002 5.776001 m
(0"-"12%&"*)[ 7.408000 8.592000 3.552000 8.592000 9.488000 8.896000 9.184000 8.896000 8.592000 0.000000 ] xS
-19.559999 24.223999 m
(+\)\(,-)[ 9.776000 13.648000 8.592000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
2.5 76 m
108 76 l
108 2 l
2.5 2 l
h
2.5 76 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -212 494 cm
214.5 418 m
320 418 l
320 492 l
214.5 492 l
h
214.5 418 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 55.25 39 cm
-24.304001 -12.671997 m
('\(\)"*)[ 11.552000 8.592000 13.648000 8.592000 0.000000 ] xS
-39.712002 5.776001 m
(0"-"12%&"*)[ 7.408000 8.592000 3.552000 8.592000 9.488000 8.896000 9.184000 8.896000 8.592000 0.000000 ] xS
-29.488001 24.223999 m
(.//#"$$)[ 10.368000 9.488000 9.488000 5.040000 8.592000 8.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -212 494 cm
368.17975 334.95853 m
305.01828 410.0412 l
S
0 i
CM
87.868347 77.836845 m
95.314011 82.027565 l
90.722557 85.890015 l
h
87.868347 77.836845 m
f
0 J
0 j
1 0 0 -1 -212 494 cm
299.86835 416.16315 m
307.31403 411.97244 l
302.72256 408.10999 l
h
299.86835 416.16315 m
S
CM
161.32968 165.16342 m
153.88402 160.9727 l
158.47548 157.11024 l
h
161.32968 165.16342 m
f
1 0 0 -1 -212 494 cm
373.32968 328.83658 m
365.884 333.02731 l
370.47546 336.88974 l
h
373.32968 328.83658 m
S
1 J
1 j
0.60000002 i
481.60001 455 m
330.39999 455 l
S
0 i
CM
110.4 39.000008 m
118.4 36.000008 l
118.4 42.000008 l
h
110.4 39.000008 m
f
0 J
0 j
1 0 0 -1 -212 494 cm
322.39999 455 m
330.39999 458 l
330.39999 452 l
h
322.39999 455 m
S
CM
277.60001 39.000008 m
269.60001 42.000008 l
269.60001 36.000008 l
h
277.60001 39.000008 m
f
1 0 0 -1 -212 494 cm
489.60001 455 m
481.60001 452 l
481.60001 458 l
h
489.60001 455 m
S
1 J
1 j
0.60000002 i
443.79388 334.961 m
506.90414 410.03925 l
S
0 i
CM
300.05179 77.836891 m
297.20059 85.891113 l
292.6077 82.030365 l
h
300.05179 77.836891 m
f
0 J
0 j
1 0 0 -1 -212 494 cm
512.05182 416.16312 m
509.20059 408.10889 l
504.6077 411.96964 l
h
512.05182 416.16312 m
S
CM
226.64624 165.16284 m
229.49745 157.10863 l
234.09035 160.96938 l
h
226.64624 165.16284 m
f
1 0 0 -1 -212 494 cm
438.64624 328.83716 m
441.49747 336.89139 l
446.09033 333.03064 l
h
438.64624 328.83716 m
S
ep
end
%%Trailer
%%EOF
